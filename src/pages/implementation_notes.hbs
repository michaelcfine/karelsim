{{!-- pages/index.hbs --}}

{{#> layouts/base title="Karel the Robot Projects" }}

	{{#*inline "main-block"}}

		<div id="implementation_notes">
			<div id="implementation_notes_heading">Implementation Notes</div>
			<div id="implementation_notes_mininav"><a href="/karel/">return to main page</a></div>
			<div id="implementation_notes_content">

				<p>
					This page provides some notes about how the Karel simulator is implemented.
				</p>

				<h1>Design Goals</h1>

				<p>
					First, a few comments about my design goals for the project... I wanted to implement
					a Karel simulator that:
					<ul>
					<li>allows for the definition of arbitrary 'worlds' (up to a maximum size)</li>
					<li>allows for both manual operation (where a user can manually turn and move Karel)
					and full programmatic operation (where Karel follows a 'program' that guides its behavior</li>
					<li>supports at least rudimentary logging / debugging capability</li>
					<li>supports a variety of end-user programming languages (e.g., the original Karel syntax, JavaScript, etc.)</li>
					</ul>
				</p>

				<h1>Technologies</h1>

				<p>
					"Third Party" Technologies used on this site include:
					<ul>
						<li><a href="http://www.jquery.com">jQuery</a> (Core JavaScript Functionality)</li>
						<li><a href="http://www.emberjs.com">Ember.js</a> (MVC Framework)</li>
						<li><a href="http://www.requirejs.org">require.js</a>(Package/Dependency Management)</li>
						<li><a href="http://pegjs.majda.cz/online">PEG</a> (Parser Generator)</li>
						<li><a href="https://raw.github.com/kassens/javascript-formatter/master/javascript.pegjs">JavaScript Grammar</a> (JavaScript Grammar for PEG)</li>
					</ul>
				</p>

				<h1>Core JavaScript Simulation Engine</h1>

				<p>
					To overcome the single threaded nature of the web browser environment as it relates to JavaScript execution, I developed
					a "simulator" that runs JavaScript one "step" at a time. This consists of a code generator (that starts with the parse trees
					generated by a PEG grammar) that creates a list of named steps, each with information about where to go "next"; and a 
					"runtime engine" that can execute these steps one at a time, at variable speed or one at a time (as would be done when
					stepping through code).
				</p>

				<h1>Coordinate Systems</h1>

				<p>
					A critical aspect to the implementation of the simulator is that it 'knows about' two
					sets of coordinate systems. The first are 'world coordinates'. This is the coordinate system
					that Karel knows about; it is a 'logical' coordinate system. The bottom left corner of Karel's
					world is the intersection of 1st Avenue and 1st Street. X-axis values increase as you go right
					and y-axis values increase as you go up. The second set of coordinates are 'DOM-based coordinates'.
					This is the coordinate system that the code uses to model Karel's world in the page's DOM.
					In this coordinate system, (0, 0) is in the top left corner, x-axis values increase as you go
					right (same as in the world coordinate system), and y-axis values increase as you go down
					(different than in the world coordinate system).
				</p>

				<p>Pictorially: COMING SOON</p>

			</div> <!-- implementation_notes_content -->
		</div> <!-- implementation_notes -->

	{{/inline}}

{{/layouts/base}}
